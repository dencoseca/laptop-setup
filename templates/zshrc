#-------------#
#  OH MY ZSH
#-------------#

export ZSH="$HOME/.oh-my-zsh"
zstyle ':omz:update' mode disabled
zstyle ':omz:plugins:nvm' lazy yes
plugins=(git nvm)
source $ZSH/oh-my-zsh.sh

#---------#
#  TOOLS
#---------#

# starship
eval "$(starship init zsh)"

# add new line for warp
PROMPT="${PROMPT}"$'\n'

# add go executables to path
export PATH="$PATH:$(go env GOPATH)/bin"

# docker with colima
export DOCKER_HOST="unix://$HOME/.colima/default/docker.sock"

# jangle
[ -f "$HOME/.jangle_exports" ] && source "$HOME/.jangle_exports"

#------------------------------#
#  CUSTOM ALIASES / FUNCTIONS
#------------------------------#

cd_and_ls() {
  builtin cd $@ && ls -lh
}

alias src="source $HOME/.zshrc"
alias zshc="edit $HOME/.zshrc"
alias zshb="cp $HOME/.zshrc $HOME/.zshrc.bak"
alias github="cd_and_ls $HOME/Developer/repos/github.com/dencoseca"
alias repos="cd_and_ls $HOME/Developer/repos"
alias sandbox="cd_and_ls $HOME/Developer/sandbox"
alias udemy="cd_and_ls $HOME/Developer/udemy"
alias dl="cd_and_ls $HOME/Downloads"
alias dt="cd_and_ls $HOME/Desktop"
alias edit="webstorm -e $1"
alias oif="open -a Finder ./"
alias nq="networkQuality"
alias trc="tree -d -L 3 $HOME/Developer/repos"
alias d="docker"
alias dc="docker compose"
alias k="kubectl"
alias npmls="npm list -g --depth=0"
alias l="ls -lh"
alias ag="alias | grep -i $1"
alias upbrew="brew update && brew upgrade"
alias upnode="nvm install --lts --latest-npm && nvm use --lts"
alias upomz="omz update"
alias cd="cd_and_ls"
alias tf="terraform"

sockson() {
  port=${1:-1080}
  export HTTP_PROXY="socks5://localhost:${port}"
  export HTTPS_PROXY="socks5://localhost:${port}"
  export ALL_PROXY="socks5://localhost:${port}"
  local bypass=(
    'registry.terraform.io'
    'management.azure.com'
    'releases.hashicorp.com'
    'api.github.com'
    'graph.microsoft.com'
    '*.queue.core.windows.net'
    '*.table.core.windows.net'
    '*.blob.core.windows.net'
    '*.googleapis.com'
  )
  bypass=$(printf ",%s" "${bypass[@]}")
  export NO_PROXY=${bypass:1}
}

socksoff() {
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset ALL_PROXY
  unset NO_PROXY
}

sockswhat() {
  echo "HTTP_PROXY: $HTTP_PROXY"
  echo "HTTPS_PROXY: $HTTPS_PROXY"
  echo "ALL_PROXY: $ALL_PROXY"
  echo "NO_PROXY: $NO_PROXY"
}

dhc() {
  docker inspect --format='{{json .State.Health}}' $1 | jq
}

sweet_sweet_details() {
  local USER_INFO="$USER@$(hostname)"
  local OS_INFO="$(sw_vers | awk '{print $2}' | tr '\n' ' ' | sed 's/ $//')"
  local UPTIME_INFO="$(uptime | awk -F'up ' '{print $2}' | awk '{gsub(/^[ \t]+/, ""); if ($2 == "day," || $2 == "days,") print $1, $2, $3; else print $1}' | sed 's/, [0-9]* user.*$//' | sed 's/,$//' | sed -E 's/([0-9]+):([0-9]+)/\1 hours, \2 mins/' | sed 's/0\([0-9] mins\)/\1/')"
  local MEMORY_INFO="$(memory_pressure | grep "System-wide memory free percentage:" | awk '{used=16-16*$5/100; printf "%.1fGB / 16GB\n", used}')"
  local CPU_INFO="$(sysctl -n machdep.cpu.brand_string)"

  echo -e "\033[32m██████╗ ███████╗███╗   ██╗ ██████╗ ██████╗ ███████╗███████╗ ██████╗ █████╗\033[0m    \033[31mUser\033[0m:    $USER_INFO
\033[33m██╔══██╗██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔════╝██╔════╝██╔════╝██╔══██╗\033[0m   \033[31mUptime\033[0m:  $UPTIME_INFO
\033[31m██║  ██║█████╗  ██╔██╗ ██║██║     ██║   ██║███████╗█████╗  ██║     ███████║\033[0m   \033[31mOS\033[0m:      $OS_INFO
\033[35m██║  ██║██╔══╝  ██║╚██╗██║██║     ██║   ██║╚════██║██╔══╝  ██║     ██╔══██║\033[0m   \033[31mCPU\033[0m:     $CPU_INFO
\033[34m██████╔╝███████╗██║ ╚████║╚██████╗╚██████╔╝███████║███████╗╚██████╗██║  ██║\033[0m   \033[31mMemory\033[0m:  $MEMORY_INFO
\033[36m╚═════╝ ╚══════╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝╚═╝  ╚═╝\033[0m"
}

sweet_sweet_details
