#-------------#
#  OH MY ZSH
#-------------#

export ZSH="$HOME/.oh-my-zsh"
zstyle ':omz:update' mode disabled
plugins=(git asdf)
source "$ZSH/oh-my-zsh.sh"

#---------#
#  TOOLS
#---------#

# starship
eval "$(starship init zsh)"

# add new line for warp
PROMPT="${PROMPT}"$'\n'

# custom go binaries
MY_BIN="$HOME/.local/bin"
export PATH="$PATH:$MY_BIN"

go_install() {
  local PACKAGE="$1"
  local VERSION="${2:-latest}"

  mkdir -p "$MY_BIN"

  echo "Installing $PACKAGE@$VERSION to $MY_BIN..."
  GOBIN="$MY_BIN" GOPROXY="direct" go install "github.com/dencoseca/$PACKAGE@$VERSION"

  if [ $? -eq 0 ]; then
    echo "🥳 Successfully installed $PACKAGE@$VERSION"
  else
    echo "😭 Failed to install $PACKAGE@$VERSION"
    return 1
  fi
}

# docker with colima
export DOCKER_HOST="unix://$HOME/.colima/default/docker.sock"

# jangle
[ -f "$HOME/.jangle_exports" ] && source "$HOME/.jangle_exports"

# asdf
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
fpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)
autoload -Uz compinit && compinit

#------------------------------#
#  CUSTOM ALIASES / FUNCTIONS
#------------------------------#

cd_and_ls() {
  builtin cd "$@" && ls -lh
}

ag() {
 alias | grep -i "$1"
}

edit() {
 webstorm -e "$1"
}

alias src="source $HOME/.zshrc"
alias zshc="edit $HOME/.zshrc"
alias zshb="cp $HOME/.zshrc $HOME/.zshrc.bak"
alias dencoseca="cd_and_ls $HOME/Developer/repos/github.com/dencoseca"
alias repos="cd_and_ls $HOME/Developer/repos"
alias dl="cd_and_ls $HOME/Downloads"
alias dt="cd_and_ls $HOME/Desktop"
alias oif="open -a Finder ./"
alias nq="networkQuality"
alias trc="tree -d -L 3 $HOME/Developer/repos"
alias d="docker"
alias dc="docker compose"
alias k="kubectl"
alias npmls="npm list -g --depth=0"
alias l="ls -lh"
alias upbrew="brew update && brew upgrade"
alias upomz="omz update"
alias cd="cd_and_ls"
alias tf="terraform"

sockson() {
  port=${1:-1080}
  export HTTP_PROXY="socks5://localhost:${port}"
  export HTTPS_PROXY="socks5://localhost:${port}"
  export ALL_PROXY="socks5://localhost:${port}"
  local bypass=(
    'registry.terraform.io'
    'management.azure.com'
    'releases.hashicorp.com'
    'api.github.com'
    'graph.microsoft.com'
    '*.queue.core.windows.net'
    '*.table.core.windows.net'
    '*.blob.core.windows.net'
    '*.googleapis.com'
  )
  bypass=$(printf ",%s" "${bypass[@]}")
  export NO_PROXY=${bypass:1}
}

socksoff() {
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset ALL_PROXY
  unset NO_PROXY
}

sockswhat() {
  echo "HTTP_PROXY: $HTTP_PROXY"
  echo "HTTPS_PROXY: $HTTPS_PROXY"
  echo "ALL_PROXY: $ALL_PROXY"
  echo "NO_PROXY: $NO_PROXY"
}

dhc() {
  docker inspect --format='{{json .State.Health}}' "$1" | jq
}

sweet_sweet_details() {
  get_formatted_uptime() {
    echo "$((($(date +%s) - $(sysctl -n kern.boottime | awk '{print $4}' | sed 's/,//')))) seconds" | awk '{
      d=int($1/86400);
      h=int(($1%86400)/3600);
      m=int(($1%3600)/60);
      s=$1%60;
      result="";
      if(d>0) result = result d (d==1 ? " day" : " days");
      if(h>0) result = (length(result)>0 ? result ", " : result) h (h==1 ? " hr" : " hrs");
      if(m>0) result = (length(result)>0 ? result ", " : result) m (m==1 ? " min" : " mins");
      if($1<60 || s>0 && length(result)==0) result = (length(result)>0 ? result ", " : result) s (s==1 ? " sec" : " secs");
      print result
    }'
  }

  get_formatted_memory_pressure() {
    echo "$(memory_pressure | awk -v totalMemory="$(sysctl hw.memsize | awk '{ print $2/1024/1024/1024 }')" '
      BEGIN {
          pagesToGB = 16.0 / (1024 * 1024)
      }
      /Pages active:/ { active = $3 * pagesToGB }
      /Pages wired down:/ { wired = $4 * pagesToGB }
      END {
          printf "%.1fGB / %.1fGB\n",
          active + wired, totalMemory
      }')"
  }

  local USER_INFO="$USER@$(hostname | cut -d. -f1)"
  local OS_INFO="$(sw_vers | awk '{print $2}' | tr '\n' ' ' | sed 's/ $//')"
  local UPTIME_INFO="$(get_formatted_uptime)"
  local MEMORY_INFO="$(get_formatted_memory_pressure)"
  local CPU_INFO="$(top -l 1 -n 0 | grep -E "CPU" | cut -d: -f2- | sed 's/^[[:space:]]*//')"

  echo -e "\033[32m ██████╗██╗  ██╗ █████╗ ██████╗ ███████╗ █████╗ ██╗   ██╗██╗  ██╗\033[0m   \033[31mUser\033[0m:    $USER_INFO
\033[33m██╔════╝██║  ██║██╔══██╗██╔══██╗██╔════╝██╔══██╗██║   ██║╚██╗██╔╝\033[0m   \033[31mUptime\033[0m:  $UPTIME_INFO
\033[31m██║     ███████║███████║██████╔╝█████╗  ███████║██║   ██║ ╚███╔╝ \033[0m   \033[31mOS\033[0m:      $OS_INFO
\033[35m██║     ██╔══██║██╔══██║██╔═══╝ ██╔══╝  ██╔══██║██║   ██║ ██╔██╗ \033[0m   \033[31mCPU\033[0m:     $CPU_INFO
\033[34m╚██████╗██║  ██║██║  ██║██║     ███████╗██║  ██║╚██████╔╝██╔╝ ██╗\033[0m   \033[31mMemory\033[0m:  $MEMORY_INFO
\033[36m ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝\033[0m"
}

sweet_sweet_details
